#generated by `lor framework`

user  root;

pid /root/work/lghproxy/openresty-china/logs/nginx.pid;
worker_processes 4;
events {
    worker_connections 4096;
}

http {
    include ./mime.types;

    client_max_body_size 10m;    #允许客户端请求的最大单文件字节数
    client_body_buffer_size 10m;  #缓冲区代理缓冲用户端请求的最大字节数

    sendfile on;
    keepalive_timeout  65;
    charset utf8;

    lua_package_path "./app/?.lua;./app/library/?.lua;./app/?/init.lua;./?.lua;;";
    lua_package_cpath "./app/library/?.so;;";
    lua_code_cache on; # set on @production
    #LUA_SHARED_DICT

    # https://nginx.org/cn/docs/http/ngx_http_proxy_module.html
    # 1MB = 8000key
    proxy_cache_path        cache
        levels=1:2
        keys_zone=my_cache:32m
        max_size=20g
        inactive=6h
        use_temp_path=off
    ;
    proxy_http_version      1.1;
    proxy_ssl_server_name   on;

    proxy_buffer_size       16k;
    proxy_buffers           4 32k;
    proxy_busy_buffers_size 64k;
    proxy_send_timeout      30s;
    proxy_read_timeout      30s;
    proxy_connect_timeout   10s;

    map $http_origin $_origin_id {
        #
        # 授权哪些站点可使用本服务，防止外链
        #
        # 本服务会校验 HTTP 请求头 origin 字段，如果不在该列表，则拒绝代理
        # 每个 URL 对应一个短别名，用于日志记录
        # 注意 URL 不包含路径部分（结尾没有 /）
        #
        http://127.0.0.1                  '127';
        http://127.0.0.1:8080             '127';
        http://localhost                  'lo';
        http://localhost:8080             'lo';

        # 接口和网站同源，这种情况下 origin 为空
        ''                                'mysite';

        # ~ 开头为正则匹配，此处允许 github.io 所有子站点
        ~^https://([\w-]+)\.github\.io$   'gh-$1';

        # 允许任何站点使用
        # ~(.*)                             '$1';
    }

    server {
        listen 80;
        server_name lightstart.website;

        # 核心代码
        rewrite ^(.*)$ https://${server_name}$1 permanent;
    }

    server {
        resolver 8.8.8.8;
        listen 443 ssl;
        server_name lightstart.website;
        
        # ssl证书地址
        ssl_certificate         lightstart.website_bundle.crt;    # pem文件的路径
        ssl_certificate_key     lightstart.website.key;           # key文件的路径

        # ssl验证相关配置
        ssl_session_timeout  5m;    #缓存有效期
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议
        ssl_prefer_server_ciphers on;           #使用服务器端的首选算法

        # Access log with buffer, or disable it completetely if unneeded
        access_log logs/prod-access.log combined buffer=16k;
        # Error log
        error_log logs/prod-error.log;

        location = /404.html {
            internal;
            root    www;

            # http 重定向到 https（忽略 localhost 或 IP 访问）
            access_by_lua_block {
                if ngx.var.scheme == 'https' then return end

                local host = ngx.var.host
                if host == 'localhost' then return end

                if ngx.re.match(host, [[^\d+\.\d+\.\d+\.\d+$]]) then return end

                local url = host .. ':443' .. ngx.var.request_uri
                ngx.redirect('https://' .. url, 301)
            }

            # 永久重定向申请: https://hstspreload.org/
            more_set_headers
                'strict-transport-security: max-age=99999999; includeSubDomains; preload'
            ;
        }

        location / {
            root    www;
            index   404.html;
        }

        set $_level     '';
        set $_switched  '';
        set $_url       '';
        set $_ver       '';
        set $_ref       '';
        set $_type      '';
        set $_mode      '';
        set $_bodyhash  '';

        location = /error {
            internal;
            access_log          off;
            more_set_headers
                'access-control-allow-origin: *'
                'access-control-expose-headers: gateway-err--'
                'gateway-err--: {"msg": "$arg_msg", "addr": "$upstream_addr", "url": "$arg_url"}'
            ;
            return              204;
        }

        location = /preflight {
            internal;
            access_log          off;
            more_set_headers
                'access-control-allow-origin: *'
                'access-control-allow-methods: GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS'
                'access-control-max-age: 1728000'
            ;
            return              204;
        }

        # HTTP(S) Proxy
        location /http/ {
            # see ./allowed-sites.conf
            if ($_origin_id = '') {
                rewrite ^   /error?msg=ORIGIN_NOT_ALLOWED;
            }

            if ($http_x_jsproxy) {
                rewrite ^   /error?msg=CIRCULAR_DEPENDENCY;
            }

            proxy_set_header      x-jsproxy   1;
            proxy_set_header      Connection  $http_connection;
            

            if ($http_access_control_request_methods) {
                rewrite             ^   /preflight;
            }

            access_by_lua_file    lua/http-dec-req-hdr.lua;

            proxy_cache           my_cache;
            proxy_pass            $_url;

            more_set_headers
                'server: $upstream_http_server'
                'content-security-policy'
                'content-security-policy-report-only'
                'x-frame-options'
                'alt-svc'
                'clear-site-data'
            ;
            header_filter_by_lua_file   lua/http-enc-res-hdr.lua;
            body_filter_by_lua_file     lua/http-body-hash.lua;
        }

        # 该接口已作废
        location = /http {
            access_log          off;
            more_set_headers    'access-control-allow-origin: *';
            return              200  "该接口已作废，请更新前端脚本";
        }

        # WebSocket Proxy
        location = /ws {
            access_by_lua_file    lua/ws-dec-req-hdr.lua;
            proxy_set_header      Upgrade     $http_upgrade;
            proxy_set_header      Connection  $http_connection;
            proxy_pass            $_url;
        }
    }
}

    